plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7' // Use a recent stable Spring Boot version
    id 'io.spring.dependency-management' version '1.1.5' // Manages transitive dependencies
    id 'com.diffplug.spotless' version '7.0.4' // Spotless plugin for formatting
}

group = 'com.etraveligroup'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21' // Aligns with Java 21 requirement

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral() // Where Gradle looks for dependencies
    gradlePluginPortal()
}

dependencies {
     // Spring Boot Data JPA Starter for database interaction
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Spring Boot Web Starter for REST endpoints
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // MySQL Driver (or your chosen database driver)
    runtimeOnly 'com.mysql:mysql-connector-j'
    // You might also need specific version like: 'mysql:mysql-connector-java:8.0.33'

    // H2 Database (for in-memory testing or simple local setup)
    runtimeOnly 'com.h2database:h2'

    // HTTP Client for external API calls (e.g., binlist.net)
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // For WebClient (reactive HTTP client)

    // Validation API
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok (optional, for less boilerplate code like getters/setters)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok' // Important for tests if you use Lombok in test classes

    // Spring Boot Test Starter
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // Mockito for mocking in tests
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter' // For Mockito with JUnit 5

    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    implementation 'io.jsonwebtoken:jjwt:0.9.1' // For JWT
    implementation 'org.springframework.boot:spring-boot-starter-security' // For Spring Security

    implementation 'javax.persistence:javax.persistence-api:2.2' // or the latest version

    implementation 'org.hibernate:hibernate-core:5.4.30.Final' // or the latest version
}

// Spotless configuration
spotless {
    java {
        // Use the Google Java Format formatter
        googleJavaFormat('1.27.0') // The latest stable version compatible with Java 21
        target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
        removeUnusedImports() // Optional: removes unused imports
        trimTrailingWhitespace() // Optional: removes trailing whitespace
        endWithNewline() // Optional: ensures files end with a newline
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Optional: Integrate spotlessApply into the build lifecycle
// This makes sure spotlessApply runs whenever you run 'gradle check' or 'gradle build'
// Be aware that this will modify your source files during the build process.
// If you prefer to only check for formatting violations without applying them automatically
// during the build, you can remove this block and just run 'gradle spotlessApply' manually.
tasks.check {
    dependsOn spotlessApply
}

// Alternatively, to only check for formatting violations without applying them:
// tasks.check {
//     dependsOn spotlessCheck
// }
